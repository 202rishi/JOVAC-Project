# -*- coding: utf-8 -*-
"""Salary Dataset Jovac.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1txbCPu0C7xJ8EzD7D84THUYth7G_xImw
"""

import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score
from sklearn.preprocessing import StandardScaler

# Load the dataset
data = pd.read_csv("Salary_dataset.csv")

# Check for missing values
print(data.isnull().sum())

# Visualize the data
sns.scatterplot(data=data, x='YearsExperience', y='Salary')
plt.title('Scatter Plot of Salary vs. Years of Experience')
plt.xlabel('Years of Experience')
plt.ylabel('Salary')
plt.show()

# Data preparation
X = data[['YearsExperience']]
y = data['Salary']

# Split the dataset into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Feature scaling
scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

# Linear Regression model
model = LinearRegression()
model.fit(X_train_scaled, y_train)

# Predictions
y_pred = model.predict(X_test_scaled)

# Model evaluation
mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)

print(f'Mean Squared Error: {mse}')
print(f'R-squared: {r2}')

# Visualizing the regression line
plt.figure(figsize=(10, 6))
sns.regplot(x='YearsExperience', y='Salary', data=data, scatter_kws={'alpha':0.5})
plt.title('Regression Line on Salary vs. Years of Experience')
plt.xlabel('Years of Experience')
plt.ylabel('Salary')
plt.show()

